var documenterSearchIndex = {"docs":
[{"location":"library/#Package-library","page":"Package library","title":"Package library","text":"","category":"section"},{"location":"library/#Requests-to-SAOImage/DS9","page":"Package library","title":"Requests to SAOImage/DS9","text":"","category":"section"},{"location":"library/#SAOImageDS9.ds9get","page":"Package library","title":"SAOImageDS9.ds9get","text":"ds9get([apt,] args...; kwds...) -> r::AbstractString\nds9get(T::Type, [apt,] args...; kwds...) -> r::T\n\nSend a single XPA get command to SAOImage/DS9.\n\nThe command is made of arguments args... converted into strings and concatenated with separating spaces.\n\nOptional argument T is to specify the type of value to extract from the answer of the command:\n\nIf T is eltype(XPA.Reply), r is the un-processed answer of the command. The caller may use properties r.data, r.message, r.has_message, r.has_error etc. to deal with it. In all other cases, the answer is interpreted as an ASCII string, the so-called textual answer.\nIf T is unspecified, the textual answer is returned without its trailing newline ('\\n' character).\nIf T is String, the textual answer is returned (without discarding any characters).\nIf T is a scalar type, a value of this type is parsed in the textual answer and returned.\nIf T is a tuple or vector type, the textual answer is split into words which are scanned for 0, 1, or more values according to the type(s) of the entries of T.\n\nOptional argument apt is to specify another access-point to a SAOImage/DS9 server than the default one.\n\nIf T and apt are both specified, their order is irrelevant.\n\nFor example:\n\njulia> ds9get(Tuple{Float64,Float64,Float64}, \"iexam {$x $y $value}\")\n(693.0, 627.0, 64.0)\n\njulia> ds9get(Tuple{Int,Int}, \"fits size\")\n(1024, 1024)\n\njulia> ds9get(Bool, \"frame has amplifier\")\nfalse\n\njulia> ds9get(Tuple{String,VersionNumber}, \"version\")\n(\"ds9-8.7b1\", v\"8.7.0-b1\")\n\n\nSee also\n\nds9connect and ds9set.\n\nThe page https://ds9.si.edu/doc/ref/xpa.html for a list of XPA commands implemented by SAOImage/DS9. This documentation is also available via the menu Help > Reference Manual > XPA Access Points of SAOImage/DS9.\n\n\n\n\n\nds9get(A::Type{<:Array} [, apt]; kwds...) -> arr::A\n\nReturns the contents of current SAOImage/DS9 frame as an array.\n\nResult type A may be Array, Array{T}, Array{T,N}, etc. depending on which type parameters are known (or imposed). Having a more qualified array type A reduces the uncertainty of the result.\n\n\n\n\n\nds9get(VersionNumber [, apt]; kwds...)\n\nRetrieve the version of SAOImage/DS9.\n\n\n\n\n\n","category":"function"},{"location":"library/#SAOImageDS9.ds9set","page":"Package library","title":"SAOImageDS9.ds9set","text":"ds9set([apt,] args...; data=nothing, throwerrors=true, quiet=false, kwds...)\n\nSend a single XPA set command to SAOImage/DS9.\n\nThe command is made of arguments args... converted into strings and concatenated with separating spaces.\n\nOptional argument apt is to specify another access-point to a SAOImage/DS9 server than the default one.\n\nKeywords\n\ndata is to specify the data to send.\nthrowerrors is to specify whether to throw an exception in case of error(s) in the XPA reply.\nquiet is to specify whether to not warn about any errors in the XPA reply.\nkwds... are other keywords for XPA.set.\n\nSee also\n\nds9connect and ds9get.\n\nThe page https://ds9.si.edu/doc/ref/xpa.html for a list of XPA commands implemented by SAOImage/DS9. This documentation is also available via the menu Help > Reference Manual > XPA Access Points of SAOImage/DS9.\n\n\n\n\n\nds9set([apt,] arr; mask=false, frame=nothing, endian=:native, kwds...)\n\nset the contents of an SAOImage/DS9 frame to be array arr. Optional apt is to specify another access-point to a SAOImage/DS9 server than the default one.\n\nKeywords\n\nmask is true to control the DS9 mask parameters.\nframe specifies a frame number or is :new to create a new frame.\nendian specifies the byte order of arr (see SAOImageDS9.byte_order).\nkwds... are other keywords for ds9set.\n\n\n\n\n\n","category":"function"},{"location":"library/#Connection","page":"Package library","title":"Connection","text":"","category":"section"},{"location":"library/#SAOImageDS9.ds9accesspoint","page":"Package library","title":"SAOImageDS9.ds9accesspoint","text":"ds9accesspoint() -> apt\n\nYield the current default XPA access-point to SAOImage/DS9.\n\nSee also\n\nds9connect and  ds9disconnect.\n\n\n\n\n\n","category":"function"},{"location":"library/#SAOImageDS9.ds9connect","page":"Package library","title":"SAOImageDS9.ds9connect","text":"ds9connect(apt::XPA.AccessPoint) -> apt\nds9connect(addr::AbstractString) -> apt\nds9connect(; kwds...) -> apt\nds9connect(f; kwds...) -> apt\n\nSet the default XPA access-point to SAOImage/DS9 and return it. The access-point may be fully specified (1st example), specified by its address (2nd example), or found among a list of running SAOImage/DS9 (3rd and 4th examples) by calling XPA.find with filter function f and keywords kwds.... If not specified (3rd example), the default filter function is:\n\napt -> apt.class == \"DS9\" && apt.user == ENV[\"USER\"]\n\nWhen calling XPA.find, the default value of the select keyword is :interact if Julia is running an interactive session.\n\nSee also\n\nds9accesspoint and ds9disconnect.\n\n\n\n\n\n","category":"function"},{"location":"library/#SAOImageDS9.ds9disconnect","page":"Package library","title":"SAOImageDS9.ds9disconnect","text":"ds9disconnect()\n\nForget the default XPA access-point to SAOImage/DS9.\n\nSee also\n\nds9accesspoint and ds9connect.\n\n\n\n\n\n","category":"function"},{"location":"library/#Starting/quitting-SAOImage/DS9-application","page":"Package library","title":"Starting/quitting SAOImage/DS9 application","text":"","category":"section"},{"location":"library/#SAOImageDS9.ds9launch","page":"Package library","title":"SAOImageDS9.ds9launch","text":"ds9launch([name]; method=\"local\", exe=\"ds9\", timeout=30, quiet=false)\n\nLaunch the SAOImage/DS9 application and connect to it. Optional argument name is the name (and title) of the SAOImage/DS9 server to identity it. By default, the name is the given by the current PID. The default access-point is set to that of the new server.\n\nKeywords\n\nmethod is the type of connection to use. The default method is ENV[\"XPA_METHOD\"] if this environment variable is set and \"local\" otherwise.\nexe is the path to SAOImage/DS9 executable.\ntimeout is the maximum number of seconds to wait for connecting.\nquiet specifies whether to print information and warning messages.\n\nSee also\n\nds9connect and ds9quit.\n\n\n\n\n\n","category":"function"},{"location":"library/#SAOImageDS9.ds9quit","page":"Package library","title":"SAOImageDS9.ds9quit","text":"ds9quit()\nds9quit(apt::XPA.Accesspoint)\nds9quit(addr::AbstractString)\n\nRequire SAOImage/DS9 application to quit. With no argument, the default SAOImage/DS9 application is closed. Otherwise, a specific SAOImage/DS9 application may be targeted by specifying its access-point apt or the address addr of its access-point.\n\nSee also ds9accesspoint and  ds9disconnect.\n\n\n\n\n\n","category":"function"},{"location":"library/#Miscellaneaous","page":"Package library","title":"Miscellaneaous","text":"","category":"section"},{"location":"library/#SAOImageDS9.ds9cursor","page":"Package library","title":"SAOImageDS9.ds9cursor","text":"ds9cursor([apt]; event=:button, text=\"\", cancel=false) -> (key, x, y, val)\n\nreturns the position of the mouse cursor in SAOImage/DS9 interactively chosen by the user as a 4-tuple (key, x, y, val) where key is the key pressed or button clicked, (x, y) are the image coordinates of the selected position, and val the corresponding pixel value. Coordinates x and y may be 0 and val may be NaN if user selects a position outside the image area or in an empty frame.\n\nIn SAOImage/DS9 image coordinates are similar to Julia fractional indices in ordinary arrays. Hence, if the image pixels are also stored by A (an Array) in Julia, the nearest position corresponds to A[i,j] with (i,j) = round.(Int,(x,y)).\n\nOptional argument apt is to specify another access-point to a SAOImage/DS9 server than the default one.\n\nKeywords\n\nevent is the type of event to capture the cursor position, one of :button, :key, or :any.\ntext, if non-empty, specifies a message to be displayed in a message dialog first.\ncancel specifies whether the user may cancel the operation in the dialog message, in which case this function returns nothing.\n\nSee also\n\nds9iexam to retrieve the coordinate in another system than image.\n\nds9get and ds9message.\n\n\n\n\n\n","category":"function"},{"location":"library/#SAOImageDS9.ds9iexam","page":"Package library","title":"SAOImageDS9.ds9iexam","text":"ds9iexam([apt], coordsys=:image; event=:button, text=\"\", cancel=false) -> (key, x, y)\nds9iexam([apt], :value;          event=:button, text=\"\", cancel=false) -> (key, val)\n\nreturn the position or value at the mouse cursor in SAOImage/DS9 interactively chosen by the user.\n\nIf argument coordsys is :value or \"value\", this function returns (key, val) with key the key pressed or button clicked and val the pixel value (NaN if selected position is outside image area). Otherwise, this function returns (key, x, y) with (x, y) the coordinates of the selected position in coordinate system specified by coordsys.\n\nOptional argument apt is to specify another access-point to a SAOImage/DS9 server than the default one.\n\nKeywords\n\nevent is the type of event to capture the cursor position, one of :button, :key, or :any.\ntext, if non-empty, specifies a message to be displayed in a message dialog first.\ncancel specifies whether the user may cancel the operation in the dialog message, in which case this function returns nothing.\n\nSee also\n\nds9cursor to retrieve (key, x, y, val) in image coordinate system.\n\nds9get and ds9message.\n\n\n\n\n\n","category":"function"},{"location":"library/#SAOImageDS9.ds9draw","page":"Package library","title":"SAOImageDS9.ds9draw","text":"ds9draw([apt,] args...; kwds...)\n\ndraws something in SAOImage/DS9 application.\n\nThe specific operation depends on the type of the arguments.\n\n\n\n\n\nds9draw([apt,] img::AbstractMatrix; kwds...)\n\ndisplays image img (a 2-dimensional Julia array) in SAOImage/DS9.\n\nKeywords\n\nframe: to select a given frame number, or :new to draw image in a new frame;\ncmap: uses the named colormap;\nzoom: fixes the zoom factor;\nmin & max: fix the scale limits.\n\n\n\n\n\nds9draw([apt,] pnt; kwds...)\n\nDraw pnt as point(s) in SAOImage/DS9.\n\npnt can be a Point, an array, or a tuple of Point's.\n\n\n\n\n\nds9draw([apt,] box; kwds...)\n\nDraws box as rectangle(s) in SAOImage/DS9.\n\nboxcan be aBoundingBox, an array, or a tuple ofBoundingBox`'es.\n\n\n\n\n\n","category":"function"},{"location":"library/#SAOImageDS9.ds9message","page":"Package library","title":"SAOImageDS9.ds9message","text":"ds9message([apt,] text; cancel=false)\n\nDisplay a dialog with a message given by text.\n\nIf cancel=true, a Cancel button is added to the dialog: in that case, the return value is true or false depending on the button pressed by the user.\n\n\n\n\n\n","category":"function"},{"location":"library/#SAOImageDS9.ds9getregions","page":"Package library","title":"SAOImageDS9.ds9getregions","text":"ds9getregions([apt,] name=\"\"; coords=:image, selected=false)\n\nreturns the regions defined in SAOImage/DS9 frame.\n\nThe optional argument name is the name of the group of regions to extract. All regions are extracted if name is an empty string.\n\nKeywords\n\ncoords: the type of coordinates to return: can be :image, :physical, :fk5, :galactic\n\nThe return value is a vector of 3-tuples (shape, coordinates, properties), where shape is a symbol indicating shape of the region, coordinates is an array of coordinates, and properties is a dictionary with the properties of the region. Note that the code parses as much as possible the properties: therefore, the returned dictionary can include a variety of different value types, depending on the keyword. The following rules applies\n\nthe global properties are always merged to the more specific region properties;\nproperties with boolean meaning, such as :select, :edit, or :rotate are suitably converted to true or false;\nproperties enclosed within single quotes ('...'), double quotes (\"...\"), or braces ({...}) are returned as strings with the boundary markers removed;\nsince a region can contain multiple tag specifications, the :tag property is always returned as an array of strings;\nproperties consisting of multiple elements, such as :dash, :line, and :point are returned as tuples.\n\n\n\n\n\n","category":"function"},{"location":"library/#SAOImageDS9.ds9wcs","page":"Package library","title":"SAOImageDS9.ds9wcs","text":"ds9wcs([apt]; useheader=true)\n\nreturns the FITS header cards defining the WCS transformation in SAOImage/DS9 frame.\n\nKeywords\n\nuseheader specifies whether to extract WCS transformation from the FITS header. Otherwise, the WCS transformation is extracted from the result of the \"wcs save\" command.\n\n\n\n\n\n","category":"function"},{"location":"library/#Utilities","page":"Package library","title":"Utilities","text":"","category":"section"},{"location":"library/#SAOImageDS9.bitpix_of","page":"Package library","title":"SAOImageDS9.bitpix_of","text":"bitpix_of(x) -> bp\n\nyields FITS bits-per-pixel (BITPIX) value for x which can be an array or a type. A value of 0 is returned if x is not of a supported type.\n\nSee also SAOImageDS9.bitpix_to_type.\n\n\n\n\n\n","category":"function"},{"location":"library/#SAOImageDS9.bitpix_to_type","page":"Package library","title":"SAOImageDS9.bitpix_to_type","text":"bitpix_to_type(bpp) -> T\n\nReturn the Julia type corresponding to FITS BITPIX (bits-per-pixel) value bpp.\n\nSee also\n\nSAOImageDS9.bitpix_of.\n\n\n\n\n\n","category":"function"},{"location":"library/#SAOImageDS9.byte_order","page":"Package library","title":"SAOImageDS9.byte_order","text":"byte_order(endian)\n\nyields the byte order for retrieving the elements of a SAOImage/DS9 array. Argument can be one of the strings (or the equivalent symbol): \"big\" for most significant byte first, \"little\" for least significant byte first or \"native\" to yield the byte order of the machine.\n\nSee also\n\nds9get, ds9set.\n\n\n\n\n\n","category":"function"},{"location":"examples/#Examples","page":"Examples","title":"Examples","text":"","category":"section"},{"location":"examples/#Basic-examples","page":"Examples","title":"Basic examples","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"import SAOImageDS9\nusing SAOImageDS9: TupleOf\nds9connect()","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"For a 512×861 image img with Float32 pixels, ds9set(img) takes 8.502 ms (28 allocations: 1.30 KiB) while ds9get(Array) takes 5.844 ms (50 allocations: 1.68 MiB).","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Query parameters of the image displayed in the current DS9 frame:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"ds9get(Int, \"fits width\")         # get the width of the image\nds9get(Int, \"fits height\")        # get the height of the image\nds9get(Int, \"fits depth\")         # get the depth of the image\nds9get(Int, \"fits bitpix\")        # get the bits per pixel of the image\nds9get(Vector{Int}, \"fits size\")  # get the dimensions of the image","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Compared to a regular Julia's Array, SAOImage/DS9 dimensions are ordered as width, height, and depth.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"To retrieve or set the dimensions of the display window:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"ds9get(Int, \"width\")   # get the width of the image display window\nds9get(Int, \"height\")  # get the height of the image display window\nds9set(\"width\", npix)   # set the width of the image display window\nds9set(\"height\", npix)  # set the height of the image display window","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Display an image and set the scale limits:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"ds9set(img)\nds9set(\"scale limits\", 0, maximum(img))","category":"page"},{"location":"examples/#Frame-settings","page":"Examples","title":"Frame settings","text":"","category":"section"},{"location":"examples/#Set-frame-settings","page":"Examples","title":"Set frame settings","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"ds9set(\"frame center\")       # center current frame\nds9set(\"frame center\",1)     # center 'Frame1'\nds9set(\"frame center all\")   # center all frames\nds9set(\"frame clear\")        # clear current frame\nds9set(\"frame new\")          # create new frame\nds9set(\"frame new rgb\")      # create new rgb frame\nds9set(\"frame delete\")       # delete current frame\nds9set(\"frame reset\")        # reset current frame\nds9set(\"frame refresh\")      # refresh current frame\nds9set(\"frame hide\")         # hide current frame\nds9set(\"frame show\",1)       # show frame 'Frame1'\nds9set(\"frame move first\")   # move frame to first in order\nds9set(\"frame move back\")    # move frame back in order\nds9set(\"frame move forward\") # move frame forward in order\nds9set(\"frame move last\")    # move frame to last in order\nds9set(\"frame first\")        # goto first frame\nds9set(\"frame prev\")         # goto prev frame\nds9set(\"frame next\")         # goto next frame\nds9set(\"frame last\")         # goto last frame\nds9set(\"frame frameno 4\")    # goto frame 'Frame4',create if needed\nds9set(\"frame\", 3)           # goto frame 'Frame3',create if needed\nds9set(\"frame match wcs\")\nds9set(\"frame lock wcs\")","category":"page"},{"location":"examples/#Get-frame-settings","page":"Examples","title":"Get frame settings","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"ds9get(Int, \"frame\")                # returns the id of the current frame\nds9get(Int, \"frame frameno\")        # returns the id of the current frame\nds9get(Vector{Int}, \"frame all\")    # returns the id of all frames\nds9get(Vector{Int}, \"frame active\") # returns the id of all active frames\nds9get(String, \"frame lock\")\nds9get(Bool, \"frame has amplifier\")\nds9get(Bool, \"frame has datamin\")\nds9get(Bool, \"frame has datasec\")\nds9get(Bool, \"frame has detector\")\nds9get(Bool, \"frame has grid\")\nds9get(Bool, \"frame has iis\")\nds9get(Bool, \"frame has irafmin\")\nds9get(Bool, \"frame has physical\")\nds9get(Bool, \"frame has smooth\")\nds9get(Bool, \"frame has contour\")\nds9get(Bool, \"frame has contour aux\")\nds9get(Bool, \"frame has fits\")\nds9get(Bool, \"frame has fits bin\")\nds9get(Bool, \"frame has fits cube\")\nds9get(Bool, \"frame has fits mosaic\")\nds9get(Bool, \"frame has marker highlite\")\nds9get(Bool, \"frame has marker paste\")\nds9get(Bool, \"frame has marker select\")\nds9get(Bool, \"frame has marker undo\")\nds9get(Bool, \"frame has system physical\")\nds9get(Bool, \"frame has wcs wcsa\")\nds9get(Bool, \"frame has wcs equatorial wcsa\")\nds9get(Bool, \"frame has wcs linear wcsa\")","category":"page"},{"location":"examples/#Other-examples","page":"Examples","title":"Other examples","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"Get about string:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"ds9get(String, \"about\")","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Get version number, one of:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"ds9get(Tuple{String,VersionNumber}, \"version\")[2]\nds9get(VersionNumber)","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Exit SAOImage/DS9, one of:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"ds9set(\"exit\")\nds9set(\"quit\")\nds9quit()","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"However, only the last one close the connection.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Is SAOImage/DS9 iconified?","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"ds9get(Bool, \"iconify\")","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"(De)iconify SAOImage/DS9:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"ds9set(\"iconify\", bool)","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"ds9set(\"lower\")\nds9set(\"raise\") # can be used to de-iconify","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Get/set zoom level:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"ds9get(Float64, \"zoom\")  # get current zoom level\nds9set(\"zoom\", value)\nds9set(\"zoom to\", value)\nds9set(\"zoom to fit\")","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Rotation:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"ds9get(Float64, \"rotate\")\nds9set(\"rotate\", value)\nds9set(\"rotate to\", value)\nds9set(\"rotate open\")\nds9set(\"rotate close\")","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"ds9get(String, \"orient\")\nds9set(\"orient\", value)","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"#iexam(;event::Union{AbstractString,Symbol}=:button) = get_words(\"iexam\", event)\n\niexam(args...; event::Union{AbstractString,Symbol}=:button) =\n    get_words(\"iexam\", event, args...)\n\nds9get(Int, :threads)  # get threads\nds9set(\"threads\", n)","category":"page"},{"location":"install/#Installation","page":"Installation","title":"Installation","text":"","category":"section"},{"location":"install/","page":"Installation","title":"Installation","text":"SAOImageDS9 can be can be installed by Julia's package manager. In the Julia REPL, press ] to drop into package mode, then run:","category":"page"},{"location":"install/","page":"Installation","title":"Installation","text":"pkg> add SAOImageDS9","category":"page"},{"location":"install/","page":"Installation","title":"Installation","text":"Another possibility from Julia's REPL or in a Julia script:","category":"page"},{"location":"install/","page":"Installation","title":"Installation","text":"using Pkg\nPkg.add(\"SAOImageDS9\")\n# or\nPkg.add(PackageSpec(name=\"SAOImageDS9\", rev=\"master\"))","category":"page"},{"location":"install/","page":"Installation","title":"Installation","text":"To upgrade the SAOImageDS9 package:","category":"page"},{"location":"install/","page":"Installation","title":"Installation","text":"using Pkg\nPkg.update(\"SAOImageDS9\")","category":"page"},{"location":"install/","page":"Installation","title":"Installation","text":"There is nothing to build.","category":"page"},{"location":"drawing/#Drawing-in-SAOImage/DS9","page":"Drawing in SAOImage/DS9","title":"Drawing in SAOImage/DS9","text":"","category":"section"},{"location":"drawing/","page":"Drawing in SAOImage/DS9","title":"Drawing in SAOImage/DS9","text":"SAOImageDS9 can be used to quickly draw or display things in SAOImage/DS9.","category":"page"},{"location":"drawing/","page":"Drawing in SAOImage/DS9","title":"Drawing in SAOImage/DS9","text":"For instance, assuming img is a 2-dimensional Julia array, to display img as an image in SAOImage/DS9, call:","category":"page"},{"location":"drawing/","page":"Drawing in SAOImage/DS9","title":"Drawing in SAOImage/DS9","text":"ds9draw(img; kwds...)","category":"page"},{"location":"drawing/","page":"Drawing in SAOImage/DS9","title":"Drawing in SAOImage/DS9","text":"The main difference with ds9set(img) is that a number of keywords are supported:","category":"page"},{"location":"drawing/","page":"Drawing in SAOImage/DS9","title":"Drawing in SAOImage/DS9","text":"Use keyword frame to specify the frame number.\nUse keyword cmap to specify the name of the colormap.  For instance, cmap=\"gist_stern\".\nUse keyword zoom to specify the zoom factor.\nUse keywords min and/or max to specify the scale limits.","category":"page"},{"location":"drawing/","page":"Drawing in SAOImage/DS9","title":"Drawing in SAOImage/DS9","text":"The ds9draw method can be called with other kinds of arguments such as instances (or array or tuple) of TwoDimensional.Point to draw point(s) or instances of TwoDimensional.BoundingBox to draw rectangle(s).","category":"page"},{"location":"requests/#SAOImage/DS9-requests","page":"SAOImage/DS9 requests","title":"SAOImage/DS9 requests","text":"","category":"section"},{"location":"requests/","page":"SAOImage/DS9 requests","title":"SAOImage/DS9 requests","text":"There are two kinds of requests: get requests to retrieve some information or data from SAOImage/DS9 and set requests to send some data to SAOImage/DS9 or to set some of its parameters.","category":"page"},{"location":"requests/#Set-requests","page":"SAOImage/DS9 requests","title":"Set requests","text":"","category":"section"},{"location":"requests/","page":"SAOImage/DS9 requests","title":"SAOImage/DS9 requests","text":"The general syntax to perform a set request to the current SAOImage/DS9 access point is:","category":"page"},{"location":"requests/","page":"SAOImage/DS9 requests","title":"SAOImage/DS9 requests","text":"ds9set(args...; data=nothing)","category":"page"},{"location":"requests/","page":"SAOImage/DS9 requests","title":"SAOImage/DS9 requests","text":"where args... are any number of arguments which will be automatically converted into a string where the elements of args... are separated by a single space. The data keyword may be used to specify the data to send with the request, it may be nothing (the default) or a Julia array. For instance, the following 3 calls will set the current zoom to be equal to 3.7:","category":"page"},{"location":"requests/","page":"SAOImage/DS9 requests","title":"SAOImage/DS9 requests","text":"ds9set(:zoom, :to, 3.7)\nds9set(\"zoom to\", 3.7)\nds9set(\"zoom to 3.7\")","category":"page"},{"location":"requests/","page":"SAOImage/DS9 requests","title":"SAOImage/DS9 requests","text":"where the last line shows the string which is effectively sent to SAOImage/DS9 via the XPA.set method in the 3 above cases.","category":"page"},{"location":"requests/","page":"SAOImage/DS9 requests","title":"SAOImage/DS9 requests","text":"As a special case, args... can be a single array to send to SAOImage/DS9 for being displayed:","category":"page"},{"location":"requests/","page":"SAOImage/DS9 requests","title":"SAOImage/DS9 requests","text":"ds9set(arr)","category":"page"},{"location":"requests/","page":"SAOImage/DS9 requests","title":"SAOImage/DS9 requests","text":"where arr is a 2D or 3D Julia array. SAOImage/DS9 will display the values of arr as an image (if arr is a 2D array) or a sequence of images (if arr is a 3D array) in the currently selected frame with the current scale parameters, zoom, orientation, rotation, etc. Keyword order can be used to specify the byte ordering. Keyword new can be set true to display the image in a new SAOImage/DS9 frame. FIXME","category":"page"},{"location":"requests/#Get-requests","page":"SAOImage/DS9 requests","title":"Get requests","text":"","category":"section"},{"location":"requests/","page":"SAOImage/DS9 requests","title":"SAOImage/DS9 requests","text":"To perform a get request, the general syntax is:","category":"page"},{"location":"requests/","page":"SAOImage/DS9 requests","title":"SAOImage/DS9 requests","text":"ds9get([T, [dims,]] args...)","category":"page"},{"location":"requests/","page":"SAOImage/DS9 requests","title":"SAOImage/DS9 requests","text":"where the args... arguments are treated as for the ds9set method (that is converted into a single text string with separating spaces).  Optional arguments T and dims are to specify the type of the expected result and, possibly, its list of dimensions.","category":"page"},{"location":"requests/","page":"SAOImage/DS9 requests","title":"SAOImage/DS9 requests","text":"If neither T nor dims are specified, the result of the ds9get(args...) call is an instance of XPA.Reply (see documentation about XPA.jl package for how to deal with the contents of such an instance).","category":"page"},{"location":"requests/","page":"SAOImage/DS9 requests","title":"SAOImage/DS9 requests","text":"The following methods can be used to issue a get request to the current DS9 access point depending on the expected type of result:","category":"page"},{"location":"requests/","page":"SAOImage/DS9 requests","title":"SAOImage/DS9 requests","text":"ds9get(Vector{UInt8}, args...)         -> buf\nds9get(String, args...)                -> str\nds9get(Vector{String}, args...;\n                delim=isspace, keepempty=false) -> arr\nds9get(Tuple{Vararg{String}}, args...;\n                delim=isspace, keepempty=false) -> tup","category":"page"},{"location":"requests/","page":"SAOImage/DS9 requests","title":"SAOImage/DS9 requests","text":"where args... are treated as for the ds9set method.  The returned values are respectively a vector of bytes, a single string (with the last end-of-line removed if any), an array of strings (one for each line of the result and empty line removed unless keyword keepempty is set true), or an array of (non-empty) words.","category":"page"},{"location":"requests/","page":"SAOImage/DS9 requests","title":"SAOImage/DS9 requests","text":"If a single scalar integer or floating point is expected, two methods are available:","category":"page"},{"location":"requests/","page":"SAOImage/DS9 requests","title":"SAOImage/DS9 requests","text":"ds9get(Int, args...)    -> scalar\nds9get(Float, args...)  -> scalar","category":"page"},{"location":"requests/","page":"SAOImage/DS9 requests","title":"SAOImage/DS9 requests","text":"which return respectively an Int and a Float64.","category":"page"},{"location":"requests/","page":"SAOImage/DS9 requests","title":"SAOImage/DS9 requests","text":"To retrieve the array displayed by the current SAOImage/DS9 frame, do:","category":"page"},{"location":"requests/","page":"SAOImage/DS9 requests","title":"SAOImage/DS9 requests","text":"arr = ds9get(Array);","category":"page"},{"location":"requests/","page":"SAOImage/DS9 requests","title":"SAOImage/DS9 requests","text":"Keyword order can be used to specify the byte ordering.","category":"page"},{"location":"#Introduction","page":"Introduction","title":"Introduction","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"The SAOImageDS9 package provides an interface between Julia and the image viewer SAOImage/DS9 via XPA.jl, a Julia interface to the XPA Messaging System.","category":"page"},{"location":"#Table-of-contents","page":"Introduction","title":"Table of contents","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"Pages = [\n    \"install.md\",\n    \"starting.md\",\n    \"requests.md\",\n    \"connect.md\",\n    \"drawing.md\",\n    \"examples.md\",\n    \"library.md\",\n]","category":"page"},{"location":"#Method-index","page":"Introduction","title":"Method index","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"","category":"page"},{"location":"connect/#Connection-to-a-specific-server","page":"Connection to a specific server","title":"Connection to a specific server","text":"","category":"section"},{"location":"connect/","page":"Connection to a specific server","title":"Connection to a specific server","text":"When ds9connect() is called without any argument, all subsequent requests will be sent to the first SAOImage/DS9 instance found by the XPA name server.  To send further requests to a specific SAOImage/DS9 server, you may do:","category":"page"},{"location":"connect/","page":"Connection to a specific server","title":"Connection to a specific server","text":"ds9connect(apt) -> ident","category":"page"},{"location":"connect/","page":"Connection to a specific server","title":"Connection to a specific server","text":"where apt is a string identifying a specific XPA access point.  The returned value is the fully qualified identifier of the access point, it has the form host:port for a TCP/IP socket or it is the path to the socket file for an AF/Unix socket.  The access point apt may be a fully qualified identifier or a template of the form class:name like \"DS9:*\" which corresponds to any server of the class \"DS9\".  Note that name is the argument of the -title option when SAOImage/DS9 is launched.  See XPA Template for a complete description.  When ds9connect() is called with no arguments or with a template containing wild characters, it automatically connects to the first access point matching the template (\"DS9.*\" by default) with a warning if no access points, or if more than one access point are found.","category":"page"},{"location":"connect/","page":"Connection to a specific server","title":"Connection to a specific server","text":"To retrieve the identifier of the current access point to SAOImage/DS9, you may call:","category":"page"},{"location":"connect/","page":"Connection to a specific server","title":"Connection to a specific server","text":"ds9accesspoint()","category":"page"},{"location":"connect/","page":"Connection to a specific server","title":"Connection to a specific server","text":"which yields an empty string if there are no current connection.","category":"page"},{"location":"connect/","page":"Connection to a specific server","title":"Connection to a specific server","text":"Remember that all requests are sent to a given access point, but you may switch between SAOImage/DS9 servers.  For instance:","category":"page"},{"location":"connect/","page":"Connection to a specific server","title":"Connection to a specific server","text":"apt1 = ds9accesspoint()             # retrieve current access point\napt2 = ds9connect(\"DS9:some_name\")  # second access point\nds9set(arr)                         # send an image to apt2\nds9connect(apt1);                   # switch to apt1\nds9set(\"zoom to\", 1.4)              # set zoom in apt1","category":"page"},{"location":"starting/#Starting","page":"Starting","title":"Starting","text":"","category":"section"},{"location":"starting/","page":"Starting","title":"Starting","text":"To use SAOImageDS9 package, type:","category":"page"},{"location":"starting/","page":"Starting","title":"Starting","text":"using SAOImageDS9","category":"page"},{"location":"starting/","page":"Starting","title":"Starting","text":"will import the public symbols of the package (all prefixed by ds9).","category":"page"},{"location":"starting/","page":"Starting","title":"Starting","text":"You may call the ds9connect method to specify the access point to a given running SAOImage/DS9 application. If no given access point is specified, ds9connect() will automatically attempt to connect to the first access point matching \"DS9.*\" when a command is sent to SAOImage/DS9. The method ds9accesspoint() yields the name of the current access point to SAOImage/DS9, or an access-point with an empty address has been chosen or if ds9disconnect has been called.","category":"page"},{"location":"starting/","page":"Starting","title":"Starting","text":"To check the connection to SAOImage/DS9, you can type:","category":"page"},{"location":"starting/","page":"Starting","title":"Starting","text":"ds9get(VersionNumber)","category":"page"},{"location":"starting/","page":"Starting","title":"Starting","text":"which should yield the version of the SAOImage/DS9 to which you are connected.","category":"page"}]
}
